// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: drug.proto

package drug

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DrugServer_CreateDrug_FullMethodName    = "/drug.DrugServer/CreateDrug"
	DrugServer_GetDrugDetail_FullMethodName = "/drug.DrugServer/GetDrugDetail"
	DrugServer_GetDrugList_FullMethodName   = "/drug.DrugServer/GetDrugList"
	DrugServer_UpdateDrug_FullMethodName    = "/drug.DrugServer/UpdateDrug"
	DrugServer_DeleteDrug_FullMethodName    = "/drug.DrugServer/DeleteDrug"
)

// DrugServerClient is the client API for DrugServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrugServerClient interface {
	// 创建药品
	CreateDrug(ctx context.Context, in *CreateDrugRequest, opts ...grpc.CallOption) (*CreateDrugResponse, error)
	// 获取药品详情
	GetDrugDetail(ctx context.Context, in *GetDrugDetailRequest, opts ...grpc.CallOption) (*GetDrugDetailResponse, error)
	// 获取药品列表
	GetDrugList(ctx context.Context, in *GetDrugListRequest, opts ...grpc.CallOption) (*GetDrugListResponse, error)
	// 更新药品
	UpdateDrug(ctx context.Context, in *UpdateDrugRequest, opts ...grpc.CallOption) (*Empty, error)
	// 删除药品
	DeleteDrug(ctx context.Context, in *DeleteDrugRequest, opts ...grpc.CallOption) (*Empty, error)
}

type drugServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDrugServerClient(cc grpc.ClientConnInterface) DrugServerClient {
	return &drugServerClient{cc}
}

func (c *drugServerClient) CreateDrug(ctx context.Context, in *CreateDrugRequest, opts ...grpc.CallOption) (*CreateDrugResponse, error) {
	out := new(CreateDrugResponse)
	err := c.cc.Invoke(ctx, DrugServer_CreateDrug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugServerClient) GetDrugDetail(ctx context.Context, in *GetDrugDetailRequest, opts ...grpc.CallOption) (*GetDrugDetailResponse, error) {
	out := new(GetDrugDetailResponse)
	err := c.cc.Invoke(ctx, DrugServer_GetDrugDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugServerClient) GetDrugList(ctx context.Context, in *GetDrugListRequest, opts ...grpc.CallOption) (*GetDrugListResponse, error) {
	out := new(GetDrugListResponse)
	err := c.cc.Invoke(ctx, DrugServer_GetDrugList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugServerClient) UpdateDrug(ctx context.Context, in *UpdateDrugRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DrugServer_UpdateDrug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drugServerClient) DeleteDrug(ctx context.Context, in *DeleteDrugRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DrugServer_DeleteDrug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrugServerServer is the server API for DrugServer service.
// All implementations must embed UnimplementedDrugServerServer
// for forward compatibility
type DrugServerServer interface {
	// 创建药品
	CreateDrug(context.Context, *CreateDrugRequest) (*CreateDrugResponse, error)
	// 获取药品详情
	GetDrugDetail(context.Context, *GetDrugDetailRequest) (*GetDrugDetailResponse, error)
	// 获取药品列表
	GetDrugList(context.Context, *GetDrugListRequest) (*GetDrugListResponse, error)
	// 更新药品
	UpdateDrug(context.Context, *UpdateDrugRequest) (*Empty, error)
	// 删除药品
	DeleteDrug(context.Context, *DeleteDrugRequest) (*Empty, error)
	mustEmbedUnimplementedDrugServerServer()
}

// UnimplementedDrugServerServer must be embedded to have forward compatible implementations.
type UnimplementedDrugServerServer struct {
}

func (UnimplementedDrugServerServer) CreateDrug(context.Context, *CreateDrugRequest) (*CreateDrugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrug not implemented")
}
func (UnimplementedDrugServerServer) GetDrugDetail(context.Context, *GetDrugDetailRequest) (*GetDrugDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrugDetail not implemented")
}
func (UnimplementedDrugServerServer) GetDrugList(context.Context, *GetDrugListRequest) (*GetDrugListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrugList not implemented")
}
func (UnimplementedDrugServerServer) UpdateDrug(context.Context, *UpdateDrugRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrug not implemented")
}
func (UnimplementedDrugServerServer) DeleteDrug(context.Context, *DeleteDrugRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrug not implemented")
}
func (UnimplementedDrugServerServer) mustEmbedUnimplementedDrugServerServer() {}

// UnsafeDrugServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrugServerServer will
// result in compilation errors.
type UnsafeDrugServerServer interface {
	mustEmbedUnimplementedDrugServerServer()
}

func RegisterDrugServerServer(s grpc.ServiceRegistrar, srv DrugServerServer) {
	s.RegisterService(&DrugServer_ServiceDesc, srv)
}

func _DrugServer_CreateDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServerServer).CreateDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugServer_CreateDrug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServerServer).CreateDrug(ctx, req.(*CreateDrugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugServer_GetDrugDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrugDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServerServer).GetDrugDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugServer_GetDrugDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServerServer).GetDrugDetail(ctx, req.(*GetDrugDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugServer_GetDrugList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrugListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServerServer).GetDrugList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugServer_GetDrugList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServerServer).GetDrugList(ctx, req.(*GetDrugListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugServer_UpdateDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDrugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServerServer).UpdateDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugServer_UpdateDrug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServerServer).UpdateDrug(ctx, req.(*UpdateDrugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrugServer_DeleteDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDrugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrugServerServer).DeleteDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrugServer_DeleteDrug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrugServerServer).DeleteDrug(ctx, req.(*DeleteDrugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrugServer_ServiceDesc is the grpc.ServiceDesc for DrugServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrugServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drug.DrugServer",
	HandlerType: (*DrugServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrug",
			Handler:    _DrugServer_CreateDrug_Handler,
		},
		{
			MethodName: "GetDrugDetail",
			Handler:    _DrugServer_GetDrugDetail_Handler,
		},
		{
			MethodName: "GetDrugList",
			Handler:    _DrugServer_GetDrugList_Handler,
		},
		{
			MethodName: "UpdateDrug",
			Handler:    _DrugServer_UpdateDrug_Handler,
		},
		{
			MethodName: "DeleteDrug",
			Handler:    _DrugServer_DeleteDrug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drug.proto",
}
